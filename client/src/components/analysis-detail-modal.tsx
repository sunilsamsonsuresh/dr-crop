import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Button } from "@/components/ui/button";
import { 
  AlertTriangle, 
  Leaf, 
  FlaskConical, 
  Calendar,
  Download,
  X
} from "lucide-react";
import { Analysis, AnalysisResult } from "@shared/schema";

interface AnalysisDetailModalProps {
  analysis: Analysis | AnalysisResult | null;
  isOpen: boolean;
  onClose: () => void;
}

export default function AnalysisDetailModal({ analysis, isOpen, onClose }: AnalysisDetailModalProps) {
  if (!analysis) return null;

  // Handle both Analysis and AnalysisResult types
  const disease = 'organicDiagnosis' in analysis ? analysis.disease : analysis.disease;
  const severity = 'organicDiagnosis' in analysis ? analysis.severity : analysis.severity;
  const severityPercent = 'organicDiagnosis' in analysis ? analysis.severityPercent : analysis.severity_percent;
  const organicDiagnosis = 'organicDiagnosis' in analysis ? analysis.organicDiagnosis : analysis.organic_diagnosis;
  const chemicalDiagnosis = 'chemicalDiagnosis' in analysis ? analysis.chemicalDiagnosis : analysis.chemical_diagnosis;
  const createdAt = 'createdAt' in analysis ? analysis.createdAt : new Date();

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'none':
      case 'healthy':
        return 'bg-success';
      case 'mild':
        return 'bg-warning';
      case 'moderate':
        return 'bg-accent';
      case 'severe':
        return 'bg-destructive';
      default:
        return 'bg-muted';
    }
  };

  const getSeverityLabel = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'none':
        return 'No Risk';
      case 'mild':
        return 'Mild Risk';
      case 'moderate':
        return 'Moderate Risk';
      case 'severe':
        return 'High Risk';
      default:
        return severity;
    }
  };

  const downloadReport = (analysisData: Analysis | AnalysisResult) => {
    const reportContent = `
DR CROP - PLANT DISEASE ANALYSIS REPORT
=========================================

Date: ${new Date(createdAt).toLocaleString()}

DIAGNOSIS SUMMARY
-----------------
Disease: ${disease}
Severity: ${severity} (${severityPercent}%)

ORGANIC TREATMENT RECOMMENDATIONS
----------------------------------
${organicDiagnosis}

CHEMICAL TREATMENT RECOMMENDATIONS
-----------------------------------
${chemicalDiagnosis}

IMPORTANT NOTES
---------------
- This analysis is based on image recognition technology
- For critical cases, please consult with a local agricultural expert
- Follow all safety guidelines when applying treatments
- Monitor plant progress and repeat analysis if symptoms persist

Generated by Dr Crop Plant Disease Diagnostics
    `.trim();

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `plant-analysis-report-${new Date(createdAt).toISOString().split('T')[0]}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="text-xl font-bold">Analysis Details</DialogTitle>
          <div className="flex items-center space-x-2 text-sm text-muted-foreground">
            <Calendar className="h-4 w-4" />
            <span>Analyzed on {new Date(createdAt).toLocaleDateString()} at {new Date(createdAt).toLocaleTimeString()}</span>
          </div>
        </DialogHeader>

        <div className="space-y-6">
          {/* Disease Identification Card */}
          <Card className="overflow-hidden">
            <div className="bg-gradient-to-r from-primary to-primary/80 p-6 text-primary-foreground">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-2xl font-bold mb-1">
                    {disease}
                  </h2>
                  <p className="text-primary-foreground/80">Disease Identified</p>
                </div>
                <div className="w-12 h-12 bg-primary-foreground/20 rounded-full flex items-center justify-center">
                  <AlertTriangle className="text-primary-foreground text-xl" />
                </div>
              </div>
            </div>
            
            <CardContent className="p-6">
              <div className="mb-4">
                <div className="flex items-center justify-between mb-2">
                  <span className="font-medium text-foreground">Severity Level</span>
                  <span className="font-bold text-lg">
                    {severityPercent}%
                  </span>
                </div>
                <Progress 
                  value={severityPercent} 
                  className="w-full h-3"
                />
                <div className="flex justify-between text-xs text-muted-foreground mt-1">
                  <span>Healthy</span>
                  <span>Mild</span>
                  <span>Moderate</span>
                  <span>Severe</span>
                </div>
              </div>
              
              <div className="flex items-center space-x-2 text-sm">
                <Badge className={getSeverityColor(severity)}>
                  {getSeverityLabel(severity)}
                </Badge>
                <span className="text-muted-foreground">• Immediate action recommended</span>
              </div>
            </CardContent>
          </Card>

          {/* Treatment Recommendations Grid */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Organic Treatment */}
            <Card>
              <div className="bg-success/10 border-b border-border p-4">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-success/20 rounded-lg flex items-center justify-center">
                    <Leaf className="text-success text-lg" />
                  </div>
                  <div>
                    <h3 className="font-semibold text-foreground">Organic Treatment</h3>
                    <p className="text-sm text-muted-foreground">Natural & eco-friendly solutions</p>
                  </div>
                </div>
              </div>
              <CardContent className="p-4">
                <div className="space-y-3">
                  {organicDiagnosis.split('\n• ').filter(item => item.trim()).map((item, index) => (
                    <div key={index} className="flex items-start space-x-3">
                      <div className="w-2 h-2 bg-success rounded-full mt-2 flex-shrink-0"></div>
                      <p className="text-sm text-foreground">
                        {item.trim()}
                      </p>
                    </div>
                  ))}
                </div>
                <div className="mt-4 p-3 bg-info/10 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <span className="text-sm font-medium">Timeline: 7-14 days for improvement</span>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Chemical Treatment */}
            <Card>
              <div className="bg-accent/10 border-b border-border p-4">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-accent/20 rounded-lg flex items-center justify-center">
                    <FlaskConical className="text-accent text-lg" />
                  </div>
                  <div>
                    <h3 className="font-semibold text-foreground">Chemical Treatment</h3>
                    <p className="text-sm text-muted-foreground">Fast-acting conventional solutions</p>
                  </div>
                </div>
              </div>
              <CardContent className="p-4">
                <div className="space-y-3">
                  {chemicalDiagnosis.split('\n• ').filter(item => item.trim()).map((item, index) => (
                    <div key={index} className="flex items-start space-x-3">
                      <div className="w-2 h-2 bg-accent rounded-full mt-2 flex-shrink-0"></div>
                      <p className="text-sm text-foreground">
                        {item.trim()}
                      </p>
                    </div>
                  ))}
                </div>
                <div className="mt-4 p-3 bg-warning/10 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <span className="text-sm font-medium">Always follow safety protocols and local regulations</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Action Buttons */}
          <div className="flex justify-end space-x-3 pt-4">
            <Button 
              variant="outline" 
              onClick={onClose}
            >
              Close
            </Button>
            <Button 
              onClick={() => downloadReport(analysis)}
            >
              <Download className="mr-2 h-4 w-4" />
              Export Report
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
